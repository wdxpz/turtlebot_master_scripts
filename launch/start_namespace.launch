<?xml version="1.0"?>
<launch>
  <arg name="robot_namespace"/>
  <!-- Bringup one turtlebot3s - laptop/remotepc portion -->

  <arg name="move_forward_only" default="false"/>

  <!-- Command Line Arguments -->
  <arg name="$(arg robot_namespace)_init_x" default="0.0"/>
  <arg name="$(arg robot_namespace)_init_y" default="0.0"/>
  <arg name="$(arg robot_namespace)_init_a" default="0.0"/>

  <arg name="pos_x" default="$(arg robot_namespace)_init_x"/>
  <arg name="pos_y" default="$(arg robot_namespace)_init_y"/>
  <arg name="pos_a" default="$(arg robot_namespace)_init_a"/>

  <arg name="model" default="$(env TURTLEBOT3_MODEL)" doc="model type [burger, waffle, waffle_pi]"/>
  <arg name="urdf_file" default="$(find xacro)/xacro --inorder '$(find turtlebot3_description)/urdf/turtlebot3_$(arg model).urdf.xacro'" />

  <!-- Loads robot_description to parameter server from URDF file-->
  <param name="robot_description" command="$(arg urdf_file)" />

  <!-- Robot -->
  <group ns="$(arg robot_namespace)">

    <!-- Robot State Publisher -->
    <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
      <param name="publish_frequency" type="double" value="50.0" />
      <param name="tf_prefix" value="$(arg robot_namespace)"/>
    </node>
    
    <!-- AMCL -->
    <node pkg="amcl" type="amcl" name="amcl">
      <!-- Load default parameters for turtlebot -->
      <rosparam file="$(find multirobot_nv)/param/amcl_params.yaml" command="load" />
      <param name="initial_pose_x" value="$(eval arg(pos_x))"/>
      <param name="initial_pose_y" value="$(eval arg(pos_y))"/>
      <param name="initial_pose_a" value="$(eval arg(pos_a))"/>

      <param name="odom_frame_id"  value="$(arg robot_namespace)/odom"/>
      <param name="base_frame_id"  value="$(arg robot_namespace)/base_footprint"/>

      <!-- Use the single map server -->
      <remap from="static_map" to="/static_map"/>
    </node>

    <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
      <!-- Default configs form the TB3 repos -->
      <param name="base_local_planner" value="dwa_local_planner/DWAPlannerROS" />
      <rosparam file="$(find turtlebot3_navigation)/param/costmap_common_params_$(arg model).yaml" command="load" ns="global_costmap" />
      <rosparam file="$(find turtlebot3_navigation)/param/costmap_common_params_$(arg model).yaml" command="load" ns="local_costmap" />
      <rosparam file="$(find turtlebot3_navigation)/param/local_costmap_params.yaml" command="load" />
      <rosparam file="$(find turtlebot3_navigation)/param/global_costmap_params.yaml" command="load" />
      <rosparam file="$(find turtlebot3_navigation)/param/move_base_params.yaml" command="load" />
      <rosparam file="$(find turtlebot3_navigation)/param/dwa_local_planner_params_$(arg model).yaml" command="load" />

      <!-- Set tf_prefix for frames explicity, overwriting defaults -->
      <param name="global_costmap/scan/sensor_frame" value="$(arg robot_namespace)/base_scan"/>
      <param name="global_costmap/obstacle_layer/scan/sensor_frame"
	     value="$(arg robot_namespace)/base_scan"/>
      <param name="global_costmap/global_frame" value="map"/>
      <param name="global_costmap/robot_base_frame"
	     value="$(arg robot_namespace)/base_footprint"/>
      <param name="local_costmap/scan/sensor_frame" value="$(arg robot_namespace)/base_scan"/>
      <param name="local_costmap/obstacle_layer/scan/sensor_frame"
	     value="$(arg robot_namespace)/base_scan"/>
      <param name="local_costmap/global_frame" value="$(arg robot_namespace)/odom"/>
      <param name="local_costmap/robot_base_frame"
	     value="$(arg robot_namespace)/base_footprint"/>

      <!-- Centralized map server -->
      <remap from="map" to="/map"/>
      <param name="DWAPlannerROS/min_vel_x" value="0.0" if="$(arg move_forward_only)" />
    </node>

  </group>

</launch>
